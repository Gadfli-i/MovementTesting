using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerController : MonoBehaviour
{
    private Rigidbody rb;
    private PlayerInput playerInput;
    private InputAction JumpAction;

    private bool isGrounded;
    private bool isMoving;
    private float speedNormal = 1.2f;

    private float movementX;
    private float movementY;
    private float currentSpeed;

    public float minSpeed = 1.0f;
    public float medSpeed = 2.5f;
    public float maxSpeed = 12.0f;
    public float jumpForce = 5.0f;

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        playerInput = GetComponent<PlayerInput>();

        JumpAction = playerInput.actions["Jump"];
    }

    void Update()
    {
        if (JumpAction.triggered && isGrounded)
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            isGrounded = false;
            Debug.Log("Player JUMPED.");
        }
    }

    void OnMove(InputValue movementValue)
    {
        Vector2 movementVector = movementValue.Get<Vector2>();

        movementX = movementVector.x;
        movementY = movementVector.y;
    }
    private void FixedUpdate()
    {
        currentSpeed = Mathf.Round(rb.linearVelocity.magnitude);
        Vector3 movement = new Vector3(movementX, 0.0f, movementY);
        rb.AddForce(movement * (currentSpeed + minSpeed / medSpeed));

        if (currentSpeed > maxSpeed)
        {
            rb.linearVelocity = rb.linearVelocity.normalized * maxSpeed / speedNormal;
            Debug.Log("Max Speed Exceeded: " + currentSpeed + "Normalizing.");
        }
    }
    private void OnCollisionEnter(Collision other)
    {
        if (!isGrounded)
        {
            isGrounded = true;
            Debug.Log("Player is GROUNDED.");
        }
    }

    private void OnCollisionExit(Collision collision)
    {
        if (isGrounded)
        {
            isGrounded = false;
            Debug.Log("Player is AIRBORNE.");
        }
    }
}
